name: Embedded Builds

on: push
jobs:
  llvm_clang:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        env:
        - TYPE: Debug
          NAME: debian_llvm+libclang+glibc2.27
          LLVM_VERSION: 8
          STATIC_LINKING: ON
          STATIC_LIBC: OFF
          EMBED_LLVM: OFF
          EMBED_CLANG: ON
          EMBED_LIBCLANG_ONLY: ON
          EMBED_BCC: OFF
          EMBED_LIBELF: OFF
          EMBED_BINUTILS: OFF
          RUN_ALL_TESTS: 1
          RUNTIME_TEST_DISABLE: builtin.cgroup
        - TYPE: Release
          NAME: debian_llvm+libclang+glibc2.27
          LLVM_VERSION: 8
          STATIC_LINKING: ON
          STATIC_LIBC: OFF
          EMBED_LLVM: OFF
          EMBED_CLANG: ON
          EMBED_LIBCLANG_ONLY: ON
          EMBED_BCC: OFF
          EMBED_LIBELF: OFF
          EMBED_BINUTILS: OFF
          RUN_ALL_TESTS: 1
          RUNTIME_TEST_DISABLE: builtin.cgroup
        - TYPE: Release
          NAME: vanilla_llvm+clang+glibc2.27
          LLVM_VERSION: 8
          STATIC_LINKING: ON
          STATIC_LIBC: OFF
          EMBED_LLVM: ON
          EMBED_CLANG: ON
          EMBED_LIBCLANG_ONLY: OFF
          EMBED_BCC: OFF
          EMBED_LIBELF: OFF
          EMBED_BINUTILS: OFF
          RUN_ALL_TESTS: 1
          RUNTIME_TEST_DISABLE: builtin.cgroup
    steps:
    - uses: actions/checkout@v2
    - name: Build docker container
      run: |
        docker build -t bpftrace-embedded -f docker/Dockerfile.bionic-glibc docker/
    - name: bpftrace embedded build
      env: ${{ matrix.env }}
      run: |
        docker run --privileged -v $(pwd):$(pwd) -w $(pwd) -v /sys/kernel/debug:/sys/kernel/debug:rw -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -e STATIC_LINKING=${STATIC_LINKING} -e STATIC_LIBC=${STATIC_LIBC} -e EMBED_LLVM=${EMBED_LLVM} -e EMBED_CLANG=${EMBED_CLANG} -e EMBED_BCC=${EMBED_BCC} -e EMBED_LIBELF=${EMBED_LIBELF} -e EMBED_LIBCLANG_ONLY=${EMBED_LIBCLANG_ONLY} -e EMBED_BINUTILS=${EMBED_BINUTILS} bpftrace-embedded $(pwd)/build-embedded ${TYPE} -j`nproc`
    - name: Check linked libs
      env: ${{ matrix.env }}
      run: |
        docker run --privileged -v $(pwd):$(pwd) -w $(pwd) -v /sys/kernel/debug:/sys/kernel/debug:rw -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -e STATIC_LINKING=${STATIC_LINKING} -e STATIC_LIBC=${STATIC_LIBC} -e EMBED_LLVM=${EMBED_LLVM} -e EMBED_CLANG=${EMBED_CLANG} -e EMBED_BCC=${EMBED_BCC} -e EMBED_LIBELF=${EMBED_LIBELF} -e EMBED_LIBCLANG_ONLY=${EMBED_LIBCLANG_ONLY} -e EMBED_BINUTILS=${EMBED_BINUTILS} --entrypoint /bin/bash bpftrace-embedded -c "[[ -f $(pwd)/build-embedded/src/bpftrace ]] && ! readelf --dynamic $(pwd)/build-embedded/src/bpftrace | grep NEEDED | grep -v 'libm\|libc\|ld-linux\|libpthread\|libdl'"
    - name: Strip artifacts
      env: ${{ matrix.env }}
      if: matrix.env['TYPE'] == 'Release'
      run: |
        docker run --privileged -v $(pwd):$(pwd) -w $(pwd) -v /sys/kernel/debug:/sys/kernel/debug:rw -v /lib/modules:/lib/modules:ro -v /usr/src:/usr/src:ro -e STATIC_LINKING=${STATIC_LINKING} -e STATIC_LIBC=${STATIC_LIBC} -e EMBED_LLVM=${EMBED_LLVM} -e EMBED_CLANG=${EMBED_CLANG} -e EMBED_BCC=${EMBED_BCC} -e EMBED_LIBELF=${EMBED_LIBELF} -e EMBED_LIBCLANG_ONLY=${EMBED_LIBCLANG_ONLY} -e EMBED_BINUTILS=${EMBED_BINUTILS} --entrypoint /bin/bash bpftrace-embedded -c "strip --keep-symbol BEGIN_trigger $(pwd)/build-embedded/src/bpftrace"

    - uses: actions/upload-artifact@v1
      with:
        name: bpftrace-${{ matrix.env['TYPE'] }}-${{ matrix.env['NAME'] }}
        path: build-embedded/src/bpftrace
    - uses: actions/upload-artifact@v1
      with:
        name: bpftrace_test-${{ matrix.env['TYPE'] }}-${{ matrix.env['NAME'] }}
        path: build-embedded/tests/bpftrace_test

    - name: Package docker image and push to quay.io
      if: matrix.env['TYPE'] == 'Release'
      env:
        QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
      run: |
        [[ -z "${QUAY_TOKEN}" ]] && echo "QUAY_TOKEN not set" && exit 0
        # Forks can push using this approach if they create a bot user of orgname+bpftrace_buildbot
        quay_user="$(dirname ${{ github.repository }})+bpftrace_buildbot"
        echo "${QUAY_TOKEN}" | docker login -u="${quay_user}" --password-stdin quay.io
        refname=$(basename ${{ github.ref }})
        typename=$(echo ${{ matrix.env['NAME'] }} | sed 's/+/_/g')
        docker build -t quay.io/${{ github.repository }}:${{ github.sha }}-${typename} -f docker/Dockerfile.minimal .
        docker tag quay.io/${{ github.repository }}:${{ github.sha }}-${typename} quay.io/${{ github.repository }}:${refname}-${typename}
        docker push quay.io/${{ github.repository }}:${{ github.sha }}-${typename}
        docker push quay.io/${{ github.repository }}:${refname}-${typename}

        [[ "${{ matrix.env['NAME'] }}" != "vanilla_llvm+clang+glibc2.27" ]] && exit 0
        echo "Pushing default release image for ref ${refname}"
        docker tag quay.io/${{ github.repository }}:${{ github.sha }}-${typename} quay.io/${{ github.repository }}:${refname}
        docker push quay.io/${{ github.repository }}:${refname}

        [[ "${refname}" != "master" ]] && exit 0
        echo "This is a build on master, pushing :latest tag also"
        docker tag quay.io/${{ github.repository }}:${{ github.sha }}-${typename} quay.io/${{ github.repository }}:latest
        docker push quay.io/${{ github.repository }}:latest
