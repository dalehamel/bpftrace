# Detect the distribution bpftrace is being built on
function(detect_os)
  file(STRINGS "/etc/os-release" HOST_OS_INFO)

  foreach(os_info IN LISTS HOST_OS_INFO)
    if(os_info MATCHES "^ID=")
      string(REPLACE "ID=" "" HOST_OS_ID ${os_info})
      set(HOST_OS_ID ${HOST_OS_ID} PARENT_SCOPE)
    elseif(os_info MATCHES "^ID_LIKE=")
      string(REPLACE "ID_LIKE=" "" HOST_OS_ID_LIKE ${os_info})
      set(HOST_OS_ID_LIKE ${HOST_OS_ID_LIKE} PARENT_SCOPE)
    endif()
  endforeach(os_info)
endfunction(detect_os)

function(prepare_patche_series patchSeries patchPath)
  message("Writing patch series...")
  file(WRITE "${patchPath}/series" "")
  foreach(patch_info IN ITEMS ${patchSeries})
    file(APPEND "${patchPath}/series" "${patch_info}\n")
  endforeach(patch_info)
endfunction(prepare_patche_series patchSeries patchPath)

function(fetch_patches patchName patchPath patchURL patchChecksum)
    message("Downloading ${DEBIAN_PATCH_URL}")
    file(MAKE_DIRECTORY ${patchPath})
    file(DOWNLOAD "${DEBIAN_PATCH_URL}" "${patchPath}/${patchName}"
         EXPECTED_HASH SHA256=${patchChecksum})

    if(patchName MATCHES .*tar.*)
      execute_process(COMMAND tar -xpf ${patchPath}/${patchName} --strip-components=3 -C ${patchPath})
    else()
      message("Patch ${patchName} doesn't appear to a tar achive, assuming it is a plaintext patch")
    endif()
endfunction(fetch_patches patchName patchPatch patchURL patchChecksum)

function(prepare_clang_patches) # FIXME accept patch list?
  message("Building embedded Clang against host LLVM, checking compatibiilty...")
  detect_os()
  message("HOST ID ${HOST_OS_ID}")

  set(CLANG_PATCH_COMMAND "/bin/true")
  if(HOST_OS_ID STREQUAL "debian" OR HOST_OS_ID STREQUAL "ubuntu" OR HOST_OS_ID_LIKE STREQUAL "debian")
    message("Building on a debian-like system, will apply minimal debian patches to clang sources in order to build.")
    set(PATCH_NAME "debian-patches.tar.gz")
    set(PATCH_PATH "${CMAKE_CURRENT_BINARY_DIR}/debian-llvm/")
    set(DEBIAN_PATCH_SERIES "")
    list(APPEND DEBIAN_PATCH_SERIES "kfreebsd/clang_lib_Basic_Targets.diff -p2")

    if(NOT EXISTS "${PATCH_PATH}/${PATCH_NAME}")
      if(${LLVM_VERSION} VERSION_EQUAL "8" OR ${LLVM_VERSION} VERSION_GREATER "8" )
        set(DEBIAN_PATCH_URL_BASE "https://salsa.debian.org/pkg-llvm-team/llvm-toolchain/-/archive/debian/")
        set(DEBIAN_PATCH_URL_PATH "8_8.0.1-1/llvm-toolchain-debian-8_8.0.1-1.tar.gz?path=debian%2Fpatches")
        set(DEBIAN_PATCH_URL "${DEBIAN_PATCH_URL_BASE}/${DEBIAN_PATCH_URL_PATH}")
        set(DEBIAN_PATCH_CHECKSUM 2b845a5de3cc2d49924b632d3e7a2fca53c55151e586528750ace2cb2aae23db)
      else()
        message(FATAL_ERROR "No supported LLVM version has been specified with LLVM_VERSION (LLVM_VERSION=${LLVM_VERSION}), aborting")
      endif()

      list(LENGTH DEBIAN_PATCH_SERIES NUM_PATCHES)
      message("${NUM_PATCHES} patches will be applied for Clang ${LLVM_VERSION} on ${HOST_OS_ID}/${HOST_OS_ID_LIKE}")
      fetch_patches(${PATCH_NAME} ${PATCH_PATH} ${DEBIAN_PATCH_URL} ${DEBIAN_PATCH_CHECKSUM})
      prepare_patche_series("${DEBIAN_PATCH_SERIES}" ${PATCH_PATH})

      set(CLANG_PATCH_COMMAND "QUILT_PATCHES=${PATCH_PATH} quilt push -a")
    endif()
  endif()
  set(CLANG_PATCH_COMMAND "${CLANG_PATCH_COMMAND}" PARENT_SCOPE)
endfunction(prepare_clang_patches)
